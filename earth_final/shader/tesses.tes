#version 450 core
                                                                                         
layout(triangles, equal_spacing, ccw) in;                                                       
                                                                                                    
uniform mat4 projection;
uniform mat4 view;                                                                           
uniform sampler2D depthMap;  
uniform vec3 centerPos;                                                             
uniform float heightScale;                                                                      
                                                                                                
in vec3 WorldPos_ES_in[];                                                                       
in vec2 TexCoord_ES_in[];                                                                         
                                                                                                
out vec3 WorldPos_GS_in;                                                                        
out vec2 TexCoord_GS_in;                                                                            
                                                                                                
vec2 interpolate2D(vec2 v0, vec2 v1, vec2 v2)                                                   
{                                                                                               
    return vec2(gl_TessCoord.x) * v0 + vec2(gl_TessCoord.y) * v1 + vec2(gl_TessCoord.z) * v2;   
}                                                                                               
                                                                                                
vec3 interpolate3D(vec3 v0, vec3 v1, vec3 v2)                                                   
{                                                                                               
    return vec3(gl_TessCoord.x) * v0 + vec3(gl_TessCoord.y) * v1 + vec3(gl_TessCoord.z) * v2;   
}                                                                                               
                                                                                                
void main()                                                                                     
{                                                                                               
    // Interpolate the attributes of the output vertex using the barycentric coordinates        
    TexCoord_GS_in = interpolate2D(TexCoord_ES_in[0], TexCoord_ES_in[1], TexCoord_ES_in[2]);            
    WorldPos_GS_in = interpolate3D(WorldPos_ES_in[0], WorldPos_ES_in[1], WorldPos_ES_in[2]);    
    vec3 normal= WorldPos_GS_in - centerPos;
    normal = normalize(normal);                                                                                 
    // Displace the vertex along the normal                                                     
    float Displacement = texture(depthMap, TexCoord_GS_in.xy).x;                        
    WorldPos_GS_in += normal * Displacement * heightScale;                                
    gl_Position = projection * view * vec4(WorldPos_GS_in, 1.0);                                              
}              